name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        
    - name: Run security analysis
      uses: github/codeql-action/init@v2
      with:
        languages: csharp
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Release
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish CLI - Windows x64
      run: dotnet publish Slip39.Console --configuration Release --runtime win-x64 --self-contained true --output ./publish/win-x64
      
    - name: Publish CLI - Linux x64
      run: dotnet publish Slip39.Console --configuration Release --runtime linux-x64 --self-contained true --output ./publish/linux-x64
      
    - name: Publish CLI - macOS x64
      run: dotnet publish Slip39.Console --configuration Release --runtime osx-x64 --self-contained true --output ./publish/osx-x64
      
    - name: Publish CLI - macOS ARM64
      run: dotnet publish Slip39.Console --configuration Release --runtime osx-arm64 --self-contained true --output ./publish/osx-arm64
      
    - name: Create NuGet packages
      run: |
        dotnet pack Slip39.Core --configuration Release --no-build --output ./packages
        
    - name: Archive Windows x64
      run: tar -czf slip39-dotnet-win-x64.tar.gz -C ./publish/win-x64 .
      
    - name: Archive Linux x64
      run: tar -czf slip39-dotnet-linux-x64.tar.gz -C ./publish/linux-x64 .
      
    - name: Archive macOS x64
      run: tar -czf slip39-dotnet-osx-x64.tar.gz -C ./publish/osx-x64 .
      
    - name: Archive macOS ARM64
      run: tar -czf slip39-dotnet-osx-arm64.tar.gz -C ./publish/osx-arm64 .
      
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./slip39-dotnet-win-x64.tar.gz
        asset_name: slip39-dotnet-win-x64.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./slip39-dotnet-linux-x64.tar.gz
        asset_name: slip39-dotnet-linux-x64.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload macOS x64 Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./slip39-dotnet-osx-x64.tar.gz
        asset_name: slip39-dotnet-osx-x64.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload macOS ARM64 Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./slip39-dotnet-osx-arm64.tar.gz
        asset_name: slip39-dotnet-osx-arm64.tar.gz
        asset_content_type: application/gzip
        
    - name: Publish NuGet packages
      if: github.event_name == 'release'
      run: |
        dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: SonarCloud Scan
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Run tests with coverage
      run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coverage -reporttypes:Html
